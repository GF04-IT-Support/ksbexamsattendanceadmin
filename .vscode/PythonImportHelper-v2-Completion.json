[
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "stringify",
        "importPath": "flatted",
        "description": "flatted",
        "isExtraImport": true,
        "detail": "flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "importPath": "flatted",
        "description": "flatted",
        "isExtraImport": true,
        "detail": "flatted",
        "documentation": {}
    },
    {
        "label": "pdfplumber",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pdfplumber",
        "description": "pdfplumber",
        "detail": "pdfplumber",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "_Known",
        "kind": 6,
        "importPath": "node_modules.flatted.python.flatted",
        "description": "node_modules.flatted.python.flatted",
        "peekOfCode": "class _Known:\n    def __init__(self):\n        self.key = []\n        self.value = []\nclass _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0",
        "detail": "node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "node_modules.flatted.python.flatted",
        "description": "node_modules.flatted.python.flatted",
        "peekOfCode": "class _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0\n    for _ in value:\n        keys.append(i)\n        i += 1\n    return keys",
        "detail": "node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "node_modules.flatted.python.flatted",
        "description": "node_modules.flatted.python.flatted",
        "peekOfCode": "def parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:",
        "detail": "node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "node_modules.flatted.python.flatted",
        "description": "node_modules.flatted.python.flatted",
        "peekOfCode": "def stringify(value, *args, **kwargs):\n    known = _Known()\n    input = []\n    output = []\n    i = int(_index(known, input, value))\n    while i < len(input):\n        output.append(_transform(known, input, input[i]))\n        i += 1\n    return _json.dumps(output, *args, **kwargs)",
        "detail": "node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "node_modules.flatted.python.test",
        "description": "node_modules.flatted.python.test",
        "peekOfCode": "def stringify(value):\n    return _stringify(value, separators=(',', ':'))\nassert stringify([None, None]) == '[[null,null]]'\na = []\no = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'",
        "detail": "node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "node_modules.flatted.python.test",
        "description": "node_modules.flatted.python.test",
        "peekOfCode": "a = []\no = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b",
        "detail": "node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o",
        "kind": 5,
        "importPath": "node_modules.flatted.python.test",
        "description": "node_modules.flatted.python.test",
        "peekOfCode": "o = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)",
        "detail": "node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['o']",
        "kind": 5,
        "importPath": "node_modules.flatted.python.test",
        "description": "node_modules.flatted.python.test",
        "peekOfCode": "o['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)\na.append('two')\na.append(True)\no['one'] = 1\no['two'] = 'two'",
        "detail": "node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "node_modules.flatted.python.test",
        "description": "node_modules.flatted.python.test",
        "peekOfCode": "b = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)\na.append('two')\na.append(True)\no['one'] = 1\no['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'",
        "detail": "node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['one']",
        "kind": 5,
        "importPath": "node_modules.flatted.python.test",
        "description": "node_modules.flatted.python.test",
        "peekOfCode": "o['one'] = 1\no['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})",
        "detail": "node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['two']",
        "kind": 5,
        "importPath": "node_modules.flatted.python.test",
        "description": "node_modules.flatted.python.test",
        "peekOfCode": "o['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])",
        "detail": "node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['three']",
        "kind": 5,
        "importPath": "node_modules.flatted.python.test",
        "description": "node_modules.flatted.python.test",
        "peekOfCode": "o['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])\no['test'] = {'test': 'OK'}",
        "detail": "node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['a']",
        "kind": 5,
        "importPath": "node_modules.flatted.python.test",
        "description": "node_modules.flatted.python.test",
        "peekOfCode": "o['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])\no['test'] = {'test': 'OK'}\no['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));",
        "detail": "node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['test']",
        "kind": 5,
        "importPath": "node_modules.flatted.python.test",
        "description": "node_modules.flatted.python.test",
        "peekOfCode": "o['test'] = {'test': 'OK'}\no['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']",
        "detail": "node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['array']",
        "kind": 5,
        "importPath": "node_modules.flatted.python.test",
        "description": "node_modules.flatted.python.test",
        "peekOfCode": "o['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')",
        "detail": "node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "a2",
        "kind": 5,
        "importPath": "node_modules.flatted.python.test",
        "description": "node_modules.flatted.python.test",
        "peekOfCode": "a2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']",
        "detail": "node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o2",
        "kind": 5,
        "importPath": "node_modules.flatted.python.test",
        "description": "node_modules.flatted.python.test",
        "peekOfCode": "o2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "str",
        "kind": 5,
        "importPath": "node_modules.flatted.python.test",
        "description": "node_modules.flatted.python.test",
        "peekOfCode": "str = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "oo",
        "kind": 5,
        "importPath": "node_modules.flatted.python.test",
        "description": "node_modules.flatted.python.test",
        "peekOfCode": "oo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "extract_tables_from_pdf",
        "kind": 2,
        "importPath": "utils.scripts.exams_schedule_extractor",
        "description": "utils.scripts.exams_schedule_extractor",
        "peekOfCode": "def extract_tables_from_pdf(base64_pdf_data):\n    pdf_file_path = BytesIO(base64.b64decode(base64_pdf_data))\n    pdf = pdfplumber.open(pdf_file_path)\n    tables = []\n    exam_name = None\n    exam_name_updated = False\n    degree = None\n    for page in pdf.pages:\n        all_text = page.extract_text()\n        lines = all_text.split('\\n')",
        "detail": "utils.scripts.exams_schedule_extractor",
        "documentation": {}
    },
    {
        "label": "create_dataframe",
        "kind": 2,
        "importPath": "utils.scripts.exams_schedule_extractor",
        "description": "utils.scripts.exams_schedule_extractor",
        "peekOfCode": "def create_dataframe(tables):\n    df = pd.DataFrame(tables[1:], columns=tables[0])\n    df.columns = ['Day/Date', 'Course Code', 'Course Name', 'No of Students', 'Time', 'Venue', 'Examiner', 'Year']\n    df.drop(columns=['Examiner', 'Course Name'], inplace=True)\n    df = df.fillna(method='ffill')\n    df.columns = [col.replace('\\n', ' ') for col in df.columns]\n    return df\ndef clean_dataframe(df):\n    for col in df.columns:\n        if col not in ['Venue', 'Course Code']:",
        "detail": "utils.scripts.exams_schedule_extractor",
        "documentation": {}
    },
    {
        "label": "clean_dataframe",
        "kind": 2,
        "importPath": "utils.scripts.exams_schedule_extractor",
        "description": "utils.scripts.exams_schedule_extractor",
        "peekOfCode": "def clean_dataframe(df):\n    for col in df.columns:\n        if col not in ['Venue', 'Course Code']:\n            df[col] = df[col].replace('\\n', ' ', regex=True)\n    df['Venue'] = df['Venue'].apply(lambda x: ', '.join([re.sub(r'.*?(?=PG|SMA|SAARAH MENSAH AUD|SAARAH MENSAH AUDITORIUM)', '', line) for line in x.split('\\n')]) if '\\n' in x else x)\n    df['Venue'] = df['Venue'].apply(lambda x: x.translate(str.maketrans('', '', string.punctuation.replace(',', ''))))  # Remove special characters except comma\n    df['Course Code'] = df['Course Code'].replace('\\n', ', ', regex=True)\n    df.replace(to_replace=r'\\n', value=' ', regex=True, inplace=True)\n    df = df[~(df == df.columns).sum(axis=1).gt(1)]\n    df['Day/Date'] = df['Day/Date'].str.split(' ', 1).str[1].str.strip().str.strip('/')",
        "detail": "utils.scripts.exams_schedule_extractor",
        "documentation": {}
    },
    {
        "label": "split_time_column",
        "kind": 2,
        "importPath": "utils.scripts.exams_schedule_extractor",
        "description": "utils.scripts.exams_schedule_extractor",
        "peekOfCode": "def split_time_column(df):\n    df['Time'] = df['Time'].str.replace('–', '-', regex=False)\n    df['Time'] = df['Time'].str.lower()\n    time_index = df.columns.get_loc('Time')\n    time_df = df['Time'].str.split('-', expand=True)\n    time_df.columns = ['Start Time', 'End Time']\n    df = df.drop('Time', axis=1)\n    df = pd.concat([df.iloc[:, :time_index], time_df, df.iloc[:, time_index:]], axis=1)\n    df['Start Time'] = df['Start Time'].str.strip()\n    df['End Time'] = df['End Time'].str.strip()",
        "detail": "utils.scripts.exams_schedule_extractor",
        "documentation": {}
    },
    {
        "label": "correct_date_column",
        "kind": 2,
        "importPath": "utils.scripts.exams_schedule_extractor",
        "description": "utils.scripts.exams_schedule_extractor",
        "peekOfCode": "def correct_date_column(df):\n    df[['Day', 'Month', 'Years']] = df['Date'].str.split('/', expand=True)\n    df['Day'] = df['Day'].str.strip()  \n    df['Month'] = df['Month'].str.strip()  \n    df['Day'] = df['Day'].apply(lambda x: '0' + x if len(x) == 1 else x) \n    for i in range(1, len(df)):\n        if len(df.loc[i, 'Month']) == 1:\n            j = i - 1\n            while len(df.loc[j, 'Month']) == 1 and j > 0:\n                j -= 1",
        "detail": "utils.scripts.exams_schedule_extractor",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "utils.scripts.exams_schedule_extractor",
        "description": "utils.scripts.exams_schedule_extractor",
        "peekOfCode": "def main():\n    base64_pdf_data = sys.stdin.read()\n    tables, exam_name = extract_tables_from_pdf(base64_pdf_data=base64_pdf_data)\n    df = create_dataframe(tables)\n    df = clean_dataframe(df)\n    df = split_time_column(df)\n    df = correct_date_column(df)\n    exams_schedule = df.to_dict(orient='records')\n    print(json.dumps({\"exams_schedule\": exams_schedule, \"exam_name\": exam_name}))\nif __name__ == \"__main__\":",
        "detail": "utils.scripts.exams_schedule_extractor",
        "documentation": {}
    },
    {
        "label": "extract_staff_info",
        "kind": 2,
        "importPath": "utils.scripts.extract_staff_info",
        "description": "utils.scripts.extract_staff_info",
        "peekOfCode": "def extract_staff_info(excel_path):\n    df = pd.read_excel(excel_path)\n    df.drop(\"Contact\", axis=1, inplace=True)\n    staff_info = df.to_dict(orient='records')\n    print(json.dumps(staff_info))\nif __name__ == \"__main__\":\n    script_dir = os.path.dirname(os.path.realpath(__file__))\n    file_path = os.path.join(script_dir, \"All Records Query1.xlsx\")\n    extract_staff_info(file_path)",
        "detail": "utils.scripts.extract_staff_info",
        "documentation": {}
    },
    {
        "label": "extract_tables_from_pdf",
        "kind": 2,
        "importPath": "utils.scripts.invigilators_extractor",
        "description": "utils.scripts.invigilators_extractor",
        "peekOfCode": "def extract_tables_from_pdf(base64_pdf_data):\n    pdf_file_path = BytesIO(base64.b64decode(base64_pdf_data))\n    pdf = pdfplumber.open(pdf_file_path)\n    tables = []\n    for page in pdf.pages:\n        table = page.extract_table()\n        if table:\n            tables.extend(table)\n    return tables\ndef clean_venue(venue):",
        "detail": "utils.scripts.invigilators_extractor",
        "documentation": {}
    },
    {
        "label": "clean_venue",
        "kind": 2,
        "importPath": "utils.scripts.invigilators_extractor",
        "description": "utils.scripts.invigilators_extractor",
        "peekOfCode": "def clean_venue(venue):\n    venue = re.sub(r'.*?(?=PG|SMA|SAARAH MENSAH AUD|SAARAH MENSAH AUDITORIUM|BLOCK)', '', venue)\n    venue = re.sub(r'\\d', '', venue)\n    if venue.strip().startswith('BLOCK'):\n        venue = 'PG ' + venue\n    return venue.strip()\ndef clean_dataframe(df):\n    df.drop(columns=['Course Name'], inplace=True)\n    df.replace(\"\", np.nan, inplace=True)\n    df = df.fillna(method='ffill')",
        "detail": "utils.scripts.invigilators_extractor",
        "documentation": {}
    },
    {
        "label": "clean_dataframe",
        "kind": 2,
        "importPath": "utils.scripts.invigilators_extractor",
        "description": "utils.scripts.invigilators_extractor",
        "peekOfCode": "def clean_dataframe(df):\n    df.drop(columns=['Course Name'], inplace=True)\n    df.replace(\"\", np.nan, inplace=True)\n    df = df.fillna(method='ffill')\n    df.columns = [col.replace('\\n', ' ') for col in df.columns]\n    for col in df.columns:\n        if col not in ['Venue', 'Course Code']:\n            df[col] = df[col].replace('\\n', ' ', regex=True)\n    df['Venue'] = df['Venue'].replace('\\n', ' - ', regex=True)\n    df['Venue'] = df['Venue'].apply(clean_venue)",
        "detail": "utils.scripts.invigilators_extractor",
        "documentation": {}
    },
    {
        "label": "split_time_column",
        "kind": 2,
        "importPath": "utils.scripts.invigilators_extractor",
        "description": "utils.scripts.invigilators_extractor",
        "peekOfCode": "def split_time_column(df):\n    df['Time'] = df['Time'].str.replace('–', '-', regex=False)\n    df['Time'] = df['Time'].str.lower()\n    time_index = df.columns.get_loc('Time')\n    time_df = df['Time'].str.split('-', expand=True)\n    time_df.columns = ['Start Time', 'End Time']\n    df = df.drop('Time', axis=1)\n    df = pd.concat([df.iloc[:, :time_index], time_df, df.iloc[:, time_index:]], axis=1)\n    df['Start Time'] = df['Start Time'].str.strip()\n    df['End Time'] = df['End Time'].str.strip()",
        "detail": "utils.scripts.invigilators_extractor",
        "documentation": {}
    },
    {
        "label": "clean_invigilators",
        "kind": 2,
        "importPath": "utils.scripts.invigilators_extractor",
        "description": "utils.scripts.invigilators_extractor",
        "peekOfCode": "def clean_invigilators(df):\n    df['Invigilators'] = df['Invigilators'].str.replace(r'(\\b\\w+\\b)(\\s[A-Z]\\.)', r'\\1, \\2', regex=True).str.title()\n    df['Invigilators'] = df['Invigilators'].str.replace(r'\\s*-\\s*', '-', regex=True)\n    df = df.assign(Invigilators=df['Invigilators'].str.split(pat=',\\s*', expand=False)).explode('Invigilators')\n    df['Invigilators'] = df['Invigilators'].str.replace(r'[^\\w\\s.-]', '', regex=True)\n    df['Invigilators_sorted'] = df['Invigilators'].apply(lambda x: ''.join(sorted(re.sub(r'[^a-zA-Z]', '', x))))\n    df = df.sort_values('Invigilators').drop_duplicates('Invigilators_sorted', keep='last')\n    merged_invigilators = []\n    for i, invigilator in enumerate(df['Invigilators_sorted']):\n        subset_found = False",
        "detail": "utils.scripts.invigilators_extractor",
        "documentation": {}
    },
    {
        "label": "group_by_invigilator",
        "kind": 2,
        "importPath": "utils.scripts.invigilators_extractor",
        "description": "utils.scripts.invigilators_extractor",
        "peekOfCode": "def group_by_invigilator(df):\n    grouped_df = df.groupby('Invigilators').apply(lambda x: x.iloc[:, df.columns != 'Invigilators'].to_dict('records')).reset_index()\n    grouped_df.columns = ['Invigilator', 'Details']\n    return grouped_df\ndef main():\n    base64_pdf_data = sys.stdin.read()\n    tables = extract_tables_from_pdf(base64_pdf_data=base64_pdf_data)\n    df = pd.DataFrame(tables[1:], columns=tables[0])\n    df = clean_dataframe(df)\n    df = split_time_column(df)",
        "detail": "utils.scripts.invigilators_extractor",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "utils.scripts.invigilators_extractor",
        "description": "utils.scripts.invigilators_extractor",
        "peekOfCode": "def main():\n    base64_pdf_data = sys.stdin.read()\n    tables = extract_tables_from_pdf(base64_pdf_data=base64_pdf_data)\n    df = pd.DataFrame(tables[1:], columns=tables[0])\n    df = clean_dataframe(df)\n    df = split_time_column(df)\n    df = clean_invigilators(df)\n    df = df[df['Invigilators'].str.strip() != '']\n    grouped_df = group_by_invigilator(df)\n    invigilators_schedule = grouped_df.to_dict(orient='records')",
        "detail": "utils.scripts.invigilators_extractor",
        "documentation": {}
    }
]